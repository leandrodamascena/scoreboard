AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: partial batch response sample

Globals:
  Function:
    Timeout: 5
    Runtime: python3.10
    Tracing: Active
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: scoreboard
        LOG_LEVEL: INFO
        POWERTOOLS_METRICS_NAMESPACE: PowertoolsScoreboard

    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:32

Resources:

  # RESOURCES FOR PRODUCER: EventBridge -> Lambda -> Kinesis
  ProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: producer.lambda_handler
      CodeUri: scoreboard
      FunctionName: scoreboard_producer
      Policies:
        # Lambda Destinations require additional permissions
        # to send failure records to DLQ from Kinesis/DynamoDB
        - Version: "2012-10-17"
          Statement:
            Effect: "Allow"
            Action:
              - kinesis:PutRecords
            Resource: !GetAtt ScoreBoardStream.Arn

  ScoreBoardStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: kds_scoreboard
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  # RESOURCES FOR CONSUMER: Kinesis -> Lambda -> DynamoDB
  ConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: consumer.lambda_handler
      CodeUri: scoreboard
      FunctionName: scoreboard_consumer
      Timeout: 30
      Policies:
        # Lambda Destinations require additional permissions
        # to send failure records to DLQ from Kinesis/DynamoDB
        - Version: "2012-10-17"
          Statement:
            Effect: "Allow"
            Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource: !GetAtt DLQConsumer.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref ScoreboardRawData
      Events:
        KinesisStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt ScoreBoardStream.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 2
            StartingPosition: LATEST
            MaximumRetryAttempts: 2
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt DLQConsumer.Arn
            FunctionResponseTypes:
              - ReportBatchItemFailures

  ConsumerFunctionPermissionKinesisInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ConsumerFunction.Arn
      Principal: "kinesis.amazonaws.com"
      SourceArn: !GetAtt ScoreBoardStream.Arn

  ScoreboardRawData:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ScoreboardRawData
      AttributeDefinitions:
        - AttributeName: player_name
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: player_name
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  DLQConsumer:
    Type: AWS::SQS::Queue

  
  # RESOURCES FOR SUMMARIZE: DynamoDB -> Lambda -> DynamoDB
  SummarizeDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: summarize.lambda_handler
      CodeUri: scoreboard
      FunctionName: scoreboard_summarize
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            Effect: "Allow"
            Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource: !GetAtt DLQSummarize.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref ScoreboardSummedUpData
      Events:
        DynamoDBStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ScoreboardRawData.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 2
            MaximumRetryAttempts: 2
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt DLQSummarize.Arn
            FunctionResponseTypes:
              - ReportBatchItemFailures

  ScoreboardSummedUpData:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ScoreboardSummedUpData
      AttributeDefinitions:
        - AttributeName: player_name
          AttributeType: S
      KeySchema:
        - AttributeName: player_name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DLQSummarize:
    Type: AWS::SQS::Queue

  
  # RESOURCES FOR RESTAPI: API Gateway -> Lambda -> DynamoDB
  RestApiScoreboard:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      ApiKeySourceType: HEADER
      Auth:
        ApiKeyRequired: true
  
  RestiApiScoreboardDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApiScoreboard
      StageName: dev

  RestiApiScoreboardUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: Scoreboard
      Description: Usage plan for Scoreboard
      ApiStages:
        - ApiId: !Ref RestApiScoreboard
          Stage: dev
    DependsOn:
         - RestiApiScoreboardDeployment

  RestiApiScoreboardApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: apikey_scoreboard
      Description: API key for Scoreboard
      Enabled: true

  RestiApiScoreboardUsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref RestiApiScoreboardApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RestiApiScoreboardUsagePlan

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: query.lambda_handler
      CodeUri: scoreboard
      FunctionName: scoreboard_query
      Timeout: 5
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ScoreboardSummedUpData
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiScoreboard
            Path: /score
            Method: get
            RequestParameters:
              - method.request.querystring.order: 
                  Required: true
              - method.request.querystring.filter:
                  Required: false


Outputs:
  ApiEndpoint:
    Description: API endpoint URL for the deployed application
    Value: !Sub "https://${RestApiScoreboard}.execute-api.${AWS::Region}.amazonaws.com/dev/score"
  ApiKey:
    Description: API key for accessing the Scoreboard API
    Value: !Ref RestiApiScoreboardApiKey
